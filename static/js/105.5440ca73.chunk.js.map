{"version":3,"file":"static/js/105.5440ca73.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/app/ResizePlugin.ts","../node_modules/pixi.js/src/app/TickerPlugin.ts","../node_modules/pixi.js/src/app/init.ts","../node_modules/pixi.js/src/filters/FilterPipe.ts","../node_modules/pixi.js/src/scene/container/bounds/getFastGlobalBounds.ts","../node_modules/pixi.js/src/filters/FilterSystem.ts","../node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts","../node_modules/pixi.js/src/filters/init.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","../node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts","../node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","../node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts","../node_modules/pixi.js/src/scene/graphics/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts","../node_modules/pixi.js/src/scene/mesh/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts","../node_modules/pixi.js/src/scene/particle-container/gl/GlParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleBuffer.ts","../node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GlParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/gpu/GpuParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GpuParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/init.ts","../node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts","../node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts","../node_modules/pixi.js/src/scene/sprite-tiling/init.ts","../node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts","../node_modules/pixi.js/src/scene/text-bitmap/init.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts","../node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextStyle.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts","../node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts","../node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts","../node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts","../node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts","../node_modules/pixi.js/src/utils/browser/isSafari.ts","../node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts","../node_modules/pixi.js/src/scene/text-html/init.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts","../node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts","../node_modules/pixi.js/src/scene/text/init.ts","../node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPlugin}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n","import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n// TODO could we cache local bounds on the render groups?\n\nconst tempMatrix = new Matrix();\n\n/**\n * Does exactly the same as getGlobalBounds, but does instead makes use of transforming AABBs\n * of the various children within the scene graph. This is much faster, but less accurate.\n *\n * the result will never be smaller - only ever slightly larger (in most cases, it will be the same).\n * @param target - The target container to get the bounds from\n * @param bounds - The output bounds object.\n * @returns The bounds.\n */\nexport function getFastGlobalBounds(target: Container, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    _getGlobalBoundsRecursive(target, bounds);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n    bounds.applyMatrix(renderGroup.worldTransform);\n\n    return bounds;\n}\n\nexport function _getGlobalBoundsRecursive(\n    target: Container,\n    bounds: Bounds,\n)\n{\n    if (target.localDisplayStatus !== 0b111 || !target.measurable)\n    {\n        return;\n    }\n\n    const manageEffects = !!target.effects.length;\n\n    let localBounds = bounds;\n\n    if (target.renderGroup || manageEffects)\n    {\n        localBounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, target.worldTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            const viewBounds = (target as Renderable).bounds;\n\n            localBounds.addFrame(\n                viewBounds.minX,\n                viewBounds.minY,\n                viewBounds.maxX,\n                viewBounds.maxY,\n                target.groupTransform\n            );\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getGlobalBoundsRecursive(children[i], localBounds);\n        }\n    }\n\n    if (manageEffects)\n    {\n        let advanced = false;\n\n        const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            if (target.effects[i].addBounds)\n            {\n                if (!advanced)\n                {\n                    advanced = true;\n                    localBounds.applyMatrix(renderGroup.worldTransform);\n                }\n\n                target.effects[i].addBounds(localBounds, true);\n            }\n        }\n\n        if (advanced)\n        {\n            localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n            bounds.addBounds(localBounds, target.relativeGroupTransform);\n        }\n\n        bounds.addBounds(localBounds);\n        boundsPool.return(localBounds);\n    }\n    else if (target.renderGroup)\n    {\n        bounds.addBounds(localBounds, target.relativeGroupTransform);\n        boundsPool.return(localBounds);\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            getFastGlobalBounds(instruction.container, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? colorTextureSource._resolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= colorTextureSource.antialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            const viewPort = renderer.renderTarget.rootViewPort;\n\n            const rootResolution = renderer.renderTarget.renderTarget.resolution;\n\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad(padding | 0);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n","import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        bounds.addBounds(renderable.bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n","import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n","export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","import type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n    min: 9,\n    max: 10,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof rendering\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n","export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { RenderableGCSystem } from '../../../rendering/renderers/shared/texture/RenderableGCSystem';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\n\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderableGC: RenderableGCSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n    _roundPixels: 0 | 1;\n}\n\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: GraphicsSystem;\n    public state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private _graphicsBatchesHash: Record<number, BatchableGraphics[]> = Object.create(null);\n    private _adaptor: GraphicsAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n        this._adaptor.init();\n\n        this.renderer.renderableGC.addManagedHash(this, '_graphicsBatchesHash');\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n\n        const context = graphics.context;\n\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (graphics.didViewUpdate)\n        {\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const batches = this._graphicsBatchesHash[graphics.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch._batcher.updateElement(batch);\n            }\n        }\n    }\n\n    public destroyRenderable(graphics: Graphics)\n    {\n        if (this._graphicsBatchesHash[graphics.uid])\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        graphics.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._initBatchesForRenderable(graphics);\n        }\n\n        graphics.batched = gpuContext.isBatchable;\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getBatchesForRenderable(graphics);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n    }\n\n    private _initBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n\n        if (this._graphicsBatchesHash[graphics.uid] === undefined)\n        {\n            // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n            graphics.on('destroyed', this._destroyRenderableBound);\n        }\n\n        this._graphicsBatchesHash[graphics.uid] = batches;\n\n        return batches;\n    }\n\n    private _removeBatchForRenderable(graphicsUid: number)\n    {\n        this._graphicsBatchesHash[graphicsUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this._graphicsBatchesHash[graphicsUid] = null;\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n\n        for (const i in this._graphicsBatchesHash)\n        {\n            this._removeBatchForRenderable(i as unknown as number);\n        }\n\n        this._graphicsBatchesHash = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface MeshData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<Mesh>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _meshDataHash: Record<number, MeshData> = Object.create(null);\n    private _gpuBatchableMeshHash: Record<number, BatchableMesh> = Object.create(null);\n    private _adaptor: MeshAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n\n        renderer.renderableGC.addManagedHash(this, '_gpuBatchableMeshHash');\n        renderer.renderableGC.addManagedHash(this, '_meshDataHash');\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                mesh.texture\n            );\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add(mesh);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public destroyRenderable(mesh: Mesh)\n    {\n        this._meshDataHash[mesh.uid] = null;\n\n        const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n        if (gpuMesh)\n        {\n            BigPool.return(gpuMesh as PoolItem);\n            this._gpuBatchableMeshHash[mesh.uid] = null;\n        }\n\n        mesh.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(mesh: Mesh)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        this._meshDataHash[mesh.uid] = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        mesh.on('destroyed', this._destroyRenderableBound);\n\n        return this._meshDataHash[mesh.uid];\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.renderable = mesh;\n        gpuMesh.texture = mesh._texture;\n        gpuMesh.transform = mesh.groupTransform;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuBatchableMeshHash)\n        {\n            if (this._gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this._gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this._gpuBatchableMeshHash = null;\n        this._meshDataHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n\n    public _topology: Topology;\n\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    get topology() { return this._topology || this.geometry.topology; }\n    set topology(value: Topology) { this._topology = value; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @memberof scene\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @memberof scene\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {scene.MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n","import type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GlParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const state = particleContainerPipe.state;\n        const renderer = particleContainerPipe.renderer as WebGLRenderer;\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.resources.uTexture = container.texture._source;\n        shader.resources.uniforms = particleContainerPipe.localUniforms;\n\n        const gl = renderer.gl;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        // now lets upload and render the buffers..\n        renderer.shader.bind(shader);\n        renderer.state.set(state);\n        renderer.geometry.bind(buffer.geometry, shader.glProgram);\n\n        const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n        const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n        gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n    }\n}\n","/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer ||= new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer ||= new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n","import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @property {number} size - The size of the particle buffer.\n * @property {Record<string, ParticleRendererProperty>} properties - A record of attributes that the particle container uses.\n */\nexport interface ParticleBufferOptions\n{\n    size: number;\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof scene\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    public adaptor: ParticleContainerAdaptor;\n    public readonly state = State.for2d();\n    public readonly renderer: Renderer;\n\n    private _gpuBufferHash: Record<number, ParticleBuffer> = Object.create(null);\n    // eslint-disable-next-line max-len\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as unknown as (renderable: Container) => void;\n\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        renderable.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBufferHash[renderable.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public destroyRenderable(renderable: ParticleContainer)\n    {\n        const buffer = this._gpuBufferHash[renderable.uid];\n\n        buffer.destroy();\n\n        this._gpuBufferHash[renderable.uid] = null;\n\n        renderable.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\n\nexport class GlParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer, new GlParticleContainerAdaptor());\n    }\n}\n","import type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GpuParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const renderer = particleContainerPipe.renderer as WebGPURenderer;\n\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n\n        shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n\n        const state = particleContainerPipe.state;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        renderer.encoder.draw({\n            geometry: buffer.geometry,\n            shader: container.shader || particleContainerPipe.defaultShader,\n            state,\n            size: container.particleChildren.length * 6,\n        });\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\n\nexport class GpuParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer, new GpuParticleContainerAdaptor());\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe';\n\n// NOTE: this is the first occurrence of needing both gl and gpu pipes in the same file\n// This could cause some issues with tree shaking in the future.\n// Right now these two files do not import anything specific for a renderer, so is not an issue for now.\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const positions = this.positions;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this.width > w ? 1.0 : this.width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this.height > h ? 1.0 : this.height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n        positions[17] = positions[19] = positions[21] = positions[23] = this.height - (this._bottomHeight * scale);\n        positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n\n        positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n        positions[4] = positions[12] = positions[20] = positions[28] = this.width - (this._rightWidth * scale);\n        positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: NineSliceSprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture\n        );\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableMesh = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableMesh.geometry as PoolItem);\n        BigPool.return(batchableMesh as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = BigPool.get(BatchableMesh);\n\n        batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n        batchableMesh.renderable = sprite;\n        batchableMesh.transform = sprite.groupTransform;\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // if the sprite has not been updated by the view, we need to update the batchable mesh now.\n        if (!sprite.didViewUpdate)\n        {\n            this._updateBatchableSprite(sprite, batchableMesh);\n        }\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n","export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Container } from '../container/Container';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_tilingSpriteDataHash');\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                renderable.texture\n            );\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite.didViewUpdate)\n            {\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.renderable = tilingSprite;\n                batchableMesh.transform = tilingSprite.groupTransform;\n                batchableMesh.texture = tilingSprite._texture;\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite.didViewUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh._batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite.didViewUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n\n        tilingSprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', this._destroyRenderableBound);\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite.applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n","import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n","// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n\n    }\n};\n\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n\n    }\n};\n","export const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `,\n    }\n\n};\n\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `,\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n","import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { BitmapText } from './BitmapText';\n\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuBitmapText: Record<number, Graphics> = {};\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuBitmapText');\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public destroyRenderable(bitmapText: BitmapText)\n    {\n        bitmapText.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableByUid(bitmapText.uid);\n    }\n\n    private _destroyRenderableByUid(renderableUid: number)\n    {\n        const context = this._gpuBitmapText[renderableUid].context;\n\n        if (context.customShader)\n        {\n            BigPool.return(context.customShader as PoolItem);\n\n            context.customShader = null;\n        }\n\n        BigPool.return(this._gpuBitmapText[renderableUid] as PoolItem);\n        this._gpuBitmapText[renderableUid] = null;\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                context.customShader = BigPool.get(SdfShader);\n            }\n        }\n\n        const chars = Array.from(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n\n        let index = 0;\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        let tx = bitmapTextLayout.width;\n        let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n\n        if (style._stroke)\n        {\n            tx += style._stroke.width / scale;\n            ty += style._stroke.width / scale;\n        }\n\n        context\n            .translate((-bitmapText._anchor._x * tx) - padding, (-bitmapText._anchor._y * ty) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that has the same style!\n        const proxyRenderable = BigPool.get(Graphics);\n\n        this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        bitmapText.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBitmapText[bitmapText.uid];\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        for (const uid in this._gpuBitmapText)\n        {\n            this._destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this._gpuBitmapText = null;\n\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from '../container/Container';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HTMLTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as HTMLText;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        htmlText.off('destroyed', this._destroyRenderableBound);\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.transform = htmlText.groupTransform;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n        this._gpuText[htmlText.uid] = gpuTextData;\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n","import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\nexport const nssvg = 'http://www.w3.org/2000/svg';\nexport const nsxhtml = 'http://www.w3.org/1999/xhtml';\n\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n","import { Color } from '../../../color/Color';\n\nimport type { ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HTMLTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: ConvertedStrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n","/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillInput, StrokeInput } from '../graphics/shared/FillTypes';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: StrokeInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n","import { loadFontAsBase64 } from './loadFontAsBase64';\n\nexport interface FontCSSStyleOptions\n{\n    fontFamily: string | string[]\n    fontWeight: string\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n","import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n","import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: style.fontWeight,\n                        fontStyle: style.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n","import { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData ||= tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    // padding is included in the CSS calculation, so we need to remove it here\n    const doublePadding = style.padding * 2;\n\n    return {\n        width: contentBounds.width - doublePadding,\n        height: contentBounds.height - doublePadding,\n    };\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { type CanvasAndContext, CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HTMLTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\nimport type { FontCSSStyleOptions } from './utils/loadFontCSS';\n\ninterface HTMLTextTexture\n{\n    texture: Texture,\n    usageCount: number,\n    promise: Promise<Texture>,\n}\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @memberof rendering\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    public static defaultFontOptions: FontCSSStyleOptions = {\n        fontFamily: 'Arial',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n    };\n\n    private _activeTextures: Record<string, HTMLTextTexture> = {};\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(\n            options.text as string,\n            options.resolution,\n            options.style as HTMLTextStyle\n        );\n    }\n\n    public getManagedTexture(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n        textKey: string\n    ): Promise<Texture>\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text, resolution, style)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    private async _buildTexturePromise(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n    )\n    {\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        // this off set will ensure we don't get any UV bleeding!\n        const uvSafeOffset = 2;\n\n        image.width = (width | 0) + uvSafeOffset;\n        image.height = (height | 0) + uvSafeOffset;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        const resource: HTMLImageElement | HTMLCanvasElement = image;\n        let canvasAndContext: CanvasAndContext;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(canvasAndContext ? canvasAndContext.canvas : resource,\n            image.width - uvSafeOffset,\n            image.height - uvSafeOffset,\n            resolution\n        );\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        // TODO SHOULD NOT BE NEEDED\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    private _cleanUp(activeTexture: HTMLTextTexture)\n    {\n        TexturePool.returnTexture(activeTexture.texture);\n        activeTexture.texture.source.resource = null;\n        activeTexture.texture.source.uploadMethodId = 'unknown';\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n","import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n","/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n","import { DOMAdapter } from '../../environment/adapter';\n\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\nimport type { CanvasAndContext } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * Remember to return this canvas is immediately to the CanvasPool for reuse when you are done with it.\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): CanvasAndContext\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas.\n    return canvasAndContext;\n}\n\n","import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as Text;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        text.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        const padding = text._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.transform = text.groupTransform;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n","import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n","import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { TextOptions } from '../AbstractText';\nimport type { Text } from '../Text';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    private readonly _renderer: Renderer;\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    public getTexture(options: TextOptions): Texture;\n    public getTexture(options: TextOptions | string, resolution?: number, style?: TextStyle, _textKey?: string): Texture\n    {\n        if (typeof options === 'string')\n        {\n            // #if _DEBUG\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n            // #endif\n\n            options = {\n                text: options,\n                style,\n                resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(\n            options as {text: string, style: TextStyle, resolution?: number}\n        );\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    public createTextureAndCanvas(options: {text: string, style: TextStyle, resolution?: number})\n    {\n        const { text, style } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        return { texture, canvasAndContext };\n    }\n\n    public getManagedTexture(text: Text)\n    {\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        const textKey = text._getKey();\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n            TexturePool.returnTexture(activeTexture.texture);\n\n            const source = activeTexture.texture.source;\n\n            source.resource = null;\n            source.uploadMethodId = 'unknown';\n            source.alphaMode = 'no-premultiply-alpha';\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n        context.scale(resolution, resolution);\n        context.textBaseline = style.textBaseline;\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n\n                if (style._stroke?.width)\n                {\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke?.width)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n"],"names":["ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","ExtensionType","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","UPDATE_PRIORITY","LOW","stop","start","Ticker","shared","oldTicker","extensions","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","clear","_getGlobalBoundsRecursive","isValid","renderGroup","parentRenderGroup","applyMatrix","worldTransform","localDisplayStatus","measurable","manageEffects","effects","length","localBounds","boundsPool","boundsArea","addRect","viewBounds","addFrame","minX","minY","maxX","maxY","groupTransform","children","i","advanced","addBounds","copyTo","invert","relativeGroupTransform","return","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_this$_activeFilterDa","_activeFilterData","backTexture","filters","_getFilterData","filterData","skip","renderables","matrix","renderable","globalDisplayStatus","getGlobalRenderableBounds","filterArea","filterFrameTransform","cacheToLocalTransform","colorTextureSource","renderTarget","colorTexture","source","resolution","Infinity","padding","antialias","blendRequired","enabled","clipToViewport","_renderer$backBuffer$","_renderer$backBuffer","Math","min","_resolution","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","rootResolution","fitBounds","scale","ceil","pad","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","getOptimalTexture","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","rootRenderTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","RendererType","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","prepend","texture","translate","anchor","WebGLSystem","WebGPUSystem","localUniformBit","vertex","header","main","end","localUniformBitGroup2","_objectSpread","replace","localUniformBitGl","blendModeIds","normal","multiply","screen","overlay","erase","max","_State","blendMode","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","concat","for2d","default2d","State","color32BitToUniform","abgr","out","alpha","GraphicsPipe","adaptor","_graphicsBatchesHash","create","_destroyRenderableBound","destroyRenderable","_adaptor","renderableGC","addManagedHash","validateRenderable","graphics","context","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","isBatchable","addRenderable","didViewUpdate","_rebuild","_addToBatcher","updateRenderable","batches","_batcher","updateElement","_removeBatchForRenderable","off","isRenderable","getGpuContext","customShader","groupBlendMode","localUniforms","resources","uTransformMatrix","uRound","_roundPixels","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BigPool","BatchableGraphics","on","graphicsUid","forEach","GraphicsContextSystem","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","indices","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","checkAndUpdateTexture","batcher","gpuBatchableMesh","_texture","gpuMesh","getAdjustedBlendModeBlend","_initMeshData","_mesh$_geometry$indic","_mesh$_geometry$posit","_initBatchableMesh","BatchableMesh","transform","batcherName","packAsQuad","indexOffset","attributeOffset","_batch","_uvUpdateId","_textureMatrixUpdateId","_topology","reset","uvs","uvBuffer","getBuffer","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","multiplyUvs","color","attributeSize","_MeshGeometry","_ref","arguments","undefined","deprecation","v8_0_0","defaultOptions","shrinkToFit","shrinkBuffersToFit","Buffer","label","usage","BufferUsage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","uTexture","gl","getBuffers","glProgram","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","createIndicesForQuads","size","outBuffer","totalIndices","Uint16Array","Error","j","generateUpdateFunction","properties","dynamic","funcFragments","property","code","getAttributeInfoFromFormat","unshift","functionSource","join","Function","ParticleBuffer","_options$size","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","dynamicOffset","staticOffset","_staticBuffer","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","key","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","setDataWithSize","byteLength","float32View","uint32View","ParticleShader","Shader","GlProgram","from","fragment","gpuProgram","GpuProgram","wgsl","entryPoint","WHITE","uSampler","TextureStyle","uTranslationMatrix","Color","uResolution","ParticleContainerPipe","_gpuBufferHash","_renderable","_initBuffer","_properties","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe","_PlaneGeometry","super","verticesX","verticesY","build","_this$verticesX","_this$verticesY","_this$width","_this$height","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_options$width","_options$height","_options$originalWidt","_options$originalHeig","_options$leftWidth","_options$rightWidth","_options$topHeight","_options$bottomHeight","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","updateUvs","updatePositions","w","scaleW","h","scaleH","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","gpuSprite","_getGpuSprite","_updateBatchableSprite","batchableSprite","_initGPUSprite","tilingBit","tilingBitGl","TilingSpriteShader","_gpuProgram","_glProgram","compileHighShaderGpuProgram","bits","roundPixelsBit","compileHighShaderGlProgram","roundPixelsBitGl","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","a","b","c","d","tx","ty","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_updateBatchableMesh","bindGroup","_tileTransform","_tilingSpriteData$sha","_initTilingSpriteData","slice","renderableData","addressMode","applyAnchorToTexture","copyFrom","array","index","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isPowerOfTwo","BatchableSprite","_attributeStart","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","maxTextures","getMaxTexturesPerBatch","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","batchSamplers","getBatchSamplersUniformGroup","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","bitmapFont","BitmapFontManager","getFont","text","_style","distanceField","chars","Array","currentY","baseLineOffset","bitmapTextLayout","getBitmapTextLayout","offsetY","_stroke","_anchor","_x","_y","tint","applyFillAsTint","_fill","lines","line","charPositions","char","charData","round","xOffset","yOffset","lineHeight","initGpuText","proxyRenderable","Graphics","fontFamily","dynamicFont","Cache","dx","sqrt","dy","worldScale","abs","fontScale","baseRenderedFontSize","fontSize","distance","range","proxy","groupColor","groupAlpha","HTMLTextPipe","_gpuText","runners","resolutionChange","gpuText","_autoResolution","onViewUpdate","htmlText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","_updateText","_destroyRenderableById","htmlTextUid","decreaseReferenceCount","_updateGpuText","catch","e","console","error","updateQuadBounds","_htmlText$resolution","generatingTexture","getManagedTexture","gpuTextData","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","textStyleToCSS","stroke","fill","cssStyleString","setValue","toHex","fontWeight","fontStyle","fontVariant","letterSpacing","align","whiteSpace","wordWrap","breakWords","wordWrapWidth","strokeToCSS","dropShadow","dropShadowToCSS","cssOverrides","cssStyles","tagStyles","tagStyle","cssTagStyle","templates","tagStyleToCSS","dropShadowStyle","setAlpha","toHexa","cos","angle","sin","position","blur","HTMLTextStyle","TextStyle","_this$cssOverrides","_options$tagStyles","_cssOverrides","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","clone","cssStyle","addOverride","_len","_key","toAdd","v","includes","removeOverride","_len2","_key2","toRemove","loadFontCSS","url","dataSrc","response","DOMAdapter","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","result","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","_buildTexturePromise","textKey","_increaseReferenceCount","promise","then","usageCount","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","isArray","split","trim","extractFontFamilies","fontCSS","fontPromises","has","all","getFontCss","defaultTextStyle","measured","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","XMLSerializer","serializeToString","getSVGUrl","delay","async","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","test","isSafari","resource","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","clearRect","drawImage","getTemporaryCanvasFromImage","getPo2TextureFromSource","canvas","initSource","returnCanvasAndContext","activeTexture","_cleanUp","uploadMethodId","getReferenceCount","CanvasSystem","defaultFontOptions","CanvasTextPipe","textUid","canvasText","checkRow","checkColumn","top","bottom","CanvasTextSystem","getTextureSize","CanvasTextMetrics","measureText","nextPow2","_textKey","createTextureAndCanvas","_options$resolution","renderTextToCanvas","trimmed","getContext","willReadFrequently","TypeError","getImageData","left","right","Rectangle","getCanvasBoundingBox","alphaMode","_style$_stroke","font","fontStringFromTextStyle","lineWidths","maxLineWidth","fontProperties","resetTransform","textBaseline","strokeStyle","lineWidth","miterLimit","lineJoin","lineCap","cap","linePositionX","linePositionY","passesCount","_style$_stroke$width","_style$_stroke3","isShadowPass","dsOffsetText","dsOffsetShadow","fillStyle","shadowOptions","dropShadowColor","dropShadowAlpha","shadowColor","toRgbaString","dropShadowBlur","dropShadowDistance","shadowBlur","shadowOffsetX","shadowOffsetY","_style$_stroke2","getCanvasFillStyle","linePositionYShift","strokeWidth","i2","_style$_stroke4","ascent","_drawLetterSpacing","isStroke","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","tempBounds","emit"],"sourceRoot":""}